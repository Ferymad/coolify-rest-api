You are an expert in Python, FastAPI, and scalable API development.  

Key Principles

- Write concise, technical responses with accurate Python examples.
- Use functional, declarative programming; avoid classes where possible.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
- Favor named exports for routes and utility functions.
- Use the Receive an Object, Return an Object (RORO) pattern.  

Python/FastAPI

- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
- File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
- Avoid unnecessary curly braces in conditional statements.
- For single-line statements in conditionals, omit curly braces.
- Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).  

Error Handling and Validation

- Prioritize error handling and edge cases:  
  - Handle errors and edge cases at the beginning of functions.  
  - Use early returns for error conditions to avoid deeply nested if statements.  
  - Place the happy path last in the function for improved readability.  
  - Avoid unnecessary else statements; use the if-return pattern instead.  
  - Use guard clauses to handle preconditions and invalid states early.  
  - Implement proper error logging and user-friendly error messages.  
  - Use custom error types or error factories for consistent error handling.  

Dependencies

- FastAPI
- Pydantic v2
- Async database libraries like asyncpg or aiomysql
- SQLAlchemy 2.0 (if using ORM features)  

FastAPI-Specific Guidelines

- Use functional components (plain functions) and Pydantic models for input validation and response schemas.
- Use declarative route definitions with clear return type annotations.
- Use def for synchronous operations and async def for asynchronous ones.
- Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events.
- Use middleware for logging, error monitoring, and performance optimization.
- Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading.
- Use HTTPException for expected errors and model them as specific HTTP responses.
- Use middleware for handling unexpected errors, logging, and error monitoring.
- Use Pydantic's BaseModel for consistent input/output validation and response schemas.   

Performance Optimization

- Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
- Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
- Optimize data serialization and deserialization with Pydantic.
- Use lazy loading techniques for large datasets and substantial API responses.   

Key Conventions

1. Rely on FastAPIâ€™s dependency injection system for managing state and shared resources.
2. Prioritize API performance metrics (response time, latency, throughput).
3. Limit blocking operations in routes:   
   - Favor asynchronous and non-blocking flows.   
   - Use dedicated async functions for database and external API operations.   
   - Structure routes and dependencies clearly to optimize readability and maintainability.   

Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for best practices.

Before diving into the best practices, please note that you may need to adapt the globs depending on your project's specific file structure and requirements.

---
name: fastapi-best-practices.mdc
description: Best practices for building APIs with FastAPI
globs: **/*.py
---

- Use `Depends` for dependency injection to manage reusable components.
- Implement proper error handling with custom exception handlers.
- Utilize `BackgroundTasks` for non-blocking operations.
- Use Pydantic models for request/response validation and serialization.

---
name: pydantic-best-practices.mdc
description: Best practices for data validation and settings management with Pydantic
globs: **/*.py
---

- Use `BaseModel` for data validation and serialization.
- Implement custom validators for complex field validation.
- Use `Field` to set additional constraints and metadata.
- Leverage `Settings` for configuration management.

---
name: uvicorn-best-practices.mdc
description: Best practices for running FastAPI applications with Uvicorn
globs: **/*.py
---

- Use `--reload` flag for development to automatically restart the server.
- Set appropriate worker count for production using `--workers`.
- Configure logging levels with `--log-level`.
- Use SSL/TLS certificates for secure connections.

---
name: tortoise-orm-best-practices.mdc
description: Best practices for database operations with Tortoise ORM
globs: **/*.py
---

- Use async/await syntax for database operations.
- Implement proper transaction management with `transaction.atomic`.
- Use `F` expressions for database-level operations.
- Leverage `select_related` and `prefetch_related` for efficient querying.

---
name: loguru-best-practices.mdc
description: Best practices for logging with Loguru
globs: **/*.py
---

- Use structured logging with `extra` parameter for additional context.
- Implement proper log rotation and retention policies.
- Use different log levels (DEBUG, INFO, WARNING, ERROR) appropriately.
- Configure Loguru to output to multiple sinks (console, file, etc.).

---
name: asyncpg-best-practices.mdc
description: Best practices for PostgreSQL database connections with asyncpg
globs: **/*.py
---

- Use connection pooling for better performance.
- Implement proper error handling and transaction management.
- Use prepared statements for frequently executed queries.
- Leverage asyncpg's built-in support for JSON and array types.

---
name: python-dotenv-best-practices.mdc
description: Best practices for managing environment variables with python-dotenv
globs: **/*.py
---

- Keep sensitive information out of version control.
- Use `.env` files for development and testing environments.
- Implement proper fallback mechanisms for missing environment variables.
- Use `load_dotenv` early in your application startup.

---
name: httpx-best-practices.mdc
description: Best practices for making HTTP requests with httpx
globs: **/*.py
---

- Use async/await syntax for non-blocking HTTP requests.
- Implement proper timeout settings to prevent hanging requests.
- Use `Client` for managing connection pooling and persistent connections.
- Handle different response types (JSON, text, streaming) appropriately.
